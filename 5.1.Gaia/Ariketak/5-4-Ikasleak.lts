const PK = 5 // Puska kopuru maximoa
range PR = 0..PK // Lapikoan egon daitekeen puska kopuruaren rangoa
range SPR = 1..PK // Sukaldariak bota dezakeen puska kopuruaren rangoa
const BK = 2 // Basati kopurua
range BR = 1..BK // Basatien rangoa
range BLOKR= 0..1
const JA=4 //Jabearen alokairua
BASATIA = ( hartu->begiratu[p:PR]-> 	
							if(p>0) then (hartu[r:1..p]->BASATIA)
							else(askatu->BASATIA)
			|sartu->begiratu[p:PR]-> 	
							if(0<PK-p) then (sartu[r:1..PK-p]->BASATIA)
							else(askatu->BASATIA)
).


SUKALDARIA = ( begiratu[p:PR]-> 	
							if(JA<=p) then (alokairua[JA]->SUKALDARIA)
							else(askatu->SUKALDARIA)).
//Lapikoa[puska kop][blokeoaren balioa 1 baldin blokeoa aktibatuta 0 bestela]
LAPIKOA = LAPIKOA[0][0],
LAPIKOA[i:PR][blok:BLOKR] = ( when (i<PK||blok==0) s.begiratu[i] -> LAPIKOA[i][1]
| when (i>0||blok==0) b[BR].begiratu[i]-> LAPIKOA[i][1]
| when (JA<=i) s.alokairua[JA] -> LAPIKOA[i-JA][0]
| when (i>0) b[BR].hartu[p:1..i] -> LAPIKOA[i-p][0]
| when (i<PK) b[BR].sartu[p:1..PK-i] -> LAPIKOA[i+p][0]
| [i] -> LAPIKOA[i]
| b[BR].askatu-> LAPIKOA[i][0]
| s.askatu-> LAPIKOA[i][0]
).
||JANARIA = ( b[BR]:BASATIA || s:SUKALDARIA || LAPIKOA ).

